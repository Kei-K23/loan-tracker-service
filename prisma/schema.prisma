generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Model Definitions

model User {
  id            String         @id @default(uuid())
  username      String         @unique
  email         String         @unique
  password      String
  role          USER_ROLES     @default(USER)
  loans         Loan[]
  payments      Payment[]
  notifications Notification[]
  profile       Profile?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  AuditLog      AuditLog[]
}

enum USER_ROLES {
  ADMIN
  USER
  MANAGER
}

model Loan {
  id                  String     @id @default(uuid())
  amount              Float
  totalPayable        Float      @default(0)
  totalPaid           Float      @default(0)
  interestRate        Float
  penaltyRate         Float      @default(3) // Default Over due penalty rate fee
  totalPayablePenalty Float      @default(0)
  totalPaidPenalty    Float      @default(0)
  status              LoanStatus @default(PENDING)
  duration            DateTime
  userId              String
  user                User       @relation(fields: [userId], references: [id])
  payments            Payment[]
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
}

enum LoanStatus {
  PENDING
  APPROVED
  PAID
  OVERDUE
}

model Payment {
  id        String   @id @default(uuid())
  amount    Float    @default(0)
  date      DateTime @default(now())
  dueDate   DateTime
  loanId    String
  loan      Loan     @relation(fields: [loanId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

model Notification {
  id        String   @id @default(uuid())
  message   String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Profile {
  id          String    @id @default(uuid())
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id])
  firstName   String
  lastName    String
  address     String?
  phoneNumber String?
  dateOfBirth DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model AuditLog {
  id          String   @id @default(uuid())
  action      String
  description String
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
}
